// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: specialconsiderations.sql

package db

import (
	"context"
)

const countSpecialConsiderationss = `-- name: CountSpecialConsiderationss :one
select count(*) from specialconsiderations
`

// CountSpecialConsiderationss
//
//	select count(*) from specialconsiderations
func (q *Queries) CountSpecialConsiderationss(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRowContext(ctx, countSpecialConsiderationss)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteSpecialConsiderations = `-- name: DeleteSpecialConsiderations :exec
delete from specialconsiderations where id=?
`

// DeleteSpecialConsiderations
//
//	delete from specialconsiderations where id=?
func (q *Queries) DeleteSpecialConsiderations(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, deleteSpecialConsiderations, id)
	return err
}

const insertSpecialConsiderations = `-- name: InsertSpecialConsiderations :one
insert into
    specialconsiderations (id, research_brief_id, consideration)
values
    (?, ?, ?)
returning id, research_brief_id, consideration
`

type InsertSpecialConsiderationsParams struct {
	ID              string
	ResearchBriefID string
	Consideration   string
}

// InsertSpecialConsiderations
//
//	insert into
//	    specialconsiderations (id, research_brief_id, consideration)
//	values
//	    (?, ?, ?)
//	returning id, research_brief_id, consideration
func (q *Queries) InsertSpecialConsiderations(ctx context.Context, db DBTX, arg InsertSpecialConsiderationsParams) (Specialconsideration, error) {
	row := db.QueryRowContext(ctx, insertSpecialConsiderations, arg.ID, arg.ResearchBriefID, arg.Consideration)
	var i Specialconsideration
	err := row.Scan(&i.ID, &i.ResearchBriefID, &i.Consideration)
	return i, err
}

const queryAllSpecialConsiderationss = `-- name: QueryAllSpecialConsiderationss :many
select id, research_brief_id, consideration from specialconsiderations
`

// QueryAllSpecialConsiderationss
//
//	select id, research_brief_id, consideration from specialconsiderations
func (q *Queries) QueryAllSpecialConsiderationss(ctx context.Context, db DBTX) ([]Specialconsideration, error) {
	rows, err := db.QueryContext(ctx, queryAllSpecialConsiderationss)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Specialconsideration
	for rows.Next() {
		var i Specialconsideration
		if err := rows.Scan(&i.ID, &i.ResearchBriefID, &i.Consideration); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryPaginatedSpecialConsiderationss = `-- name: QueryPaginatedSpecialConsiderationss :many
select id, research_brief_id, consideration from specialconsiderations 
order by created_at desc 
limit ? offset ?
`

type QueryPaginatedSpecialConsiderationssParams struct {
	Limit  int64
	Offset int64
}

// QueryPaginatedSpecialConsiderationss
//
//	select id, research_brief_id, consideration from specialconsiderations
//	order by created_at desc
//	limit ? offset ?
func (q *Queries) QueryPaginatedSpecialConsiderationss(ctx context.Context, db DBTX, arg QueryPaginatedSpecialConsiderationssParams) ([]Specialconsideration, error) {
	rows, err := db.QueryContext(ctx, queryPaginatedSpecialConsiderationss, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Specialconsideration
	for rows.Next() {
		var i Specialconsideration
		if err := rows.Scan(&i.ID, &i.ResearchBriefID, &i.Consideration); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const querySpecialConsiderationsByID = `-- name: QuerySpecialConsiderationsByID :one
select id, research_brief_id, consideration from specialconsiderations where id=?
`

// QuerySpecialConsiderationsByID
//
//	select id, research_brief_id, consideration from specialconsiderations where id=?
func (q *Queries) QuerySpecialConsiderationsByID(ctx context.Context, db DBTX, id string) (Specialconsideration, error) {
	row := db.QueryRowContext(ctx, querySpecialConsiderationsByID, id)
	var i Specialconsideration
	err := row.Scan(&i.ID, &i.ResearchBriefID, &i.Consideration)
	return i, err
}

const querySpecialConsiderationsByResearchBriefID = `-- name: QuerySpecialConsiderationsByResearchBriefID :many
select id, research_brief_id, consideration from specialconsiderations where research_brief_id=?
`

// QuerySpecialConsiderationsByResearchBriefID
//
//	select id, research_brief_id, consideration from specialconsiderations where research_brief_id=?
func (q *Queries) QuerySpecialConsiderationsByResearchBriefID(ctx context.Context, db DBTX, researchBriefID string) ([]Specialconsideration, error) {
	rows, err := db.QueryContext(ctx, querySpecialConsiderationsByResearchBriefID, researchBriefID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Specialconsideration
	for rows.Next() {
		var i Specialconsideration
		if err := rows.Scan(&i.ID, &i.ResearchBriefID, &i.Consideration); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const querySpecialConsiderationss = `-- name: QuerySpecialConsiderationss :many
select id, research_brief_id, consideration from specialconsiderations
`

// QuerySpecialConsiderationss
//
//	select id, research_brief_id, consideration from specialconsiderations
func (q *Queries) QuerySpecialConsiderationss(ctx context.Context, db DBTX) ([]Specialconsideration, error) {
	rows, err := db.QueryContext(ctx, querySpecialConsiderationss)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Specialconsideration
	for rows.Next() {
		var i Specialconsideration
		if err := rows.Scan(&i.ID, &i.ResearchBriefID, &i.Consideration); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSpecialConsiderations = `-- name: UpdateSpecialConsiderations :one
update specialconsiderations
    set research_brief_id=?, consideration=?
where id = ?
returning id, research_brief_id, consideration
`

type UpdateSpecialConsiderationsParams struct {
	ResearchBriefID string
	Consideration   string
	ID              string
}

// UpdateSpecialConsiderations
//
//	update specialconsiderations
//	    set research_brief_id=?, consideration=?
//	where id = ?
//	returning id, research_brief_id, consideration
func (q *Queries) UpdateSpecialConsiderations(ctx context.Context, db DBTX, arg UpdateSpecialConsiderationsParams) (Specialconsideration, error) {
	row := db.QueryRowContext(ctx, updateSpecialConsiderations, arg.ResearchBriefID, arg.Consideration, arg.ID)
	var i Specialconsideration
	err := row.Scan(&i.ID, &i.ResearchBriefID, &i.Consideration)
	return i, err
}
