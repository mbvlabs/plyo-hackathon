// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: agentguidances.sql

package db

import (
	"context"
)

const countAgentGuidances = `-- name: CountAgentGuidances :one
select count(*) from agentguidances
`

// CountAgentGuidances
//
//	select count(*) from agentguidances
func (q *Queries) CountAgentGuidances(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRowContext(ctx, countAgentGuidances)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteAgentGuidance = `-- name: DeleteAgentGuidance :exec
delete from agentguidances where id=?
`

// DeleteAgentGuidance
//
//	delete from agentguidances where id=?
func (q *Queries) DeleteAgentGuidance(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, deleteAgentGuidance, id)
	return err
}

const insertAgentGuidance = `-- name: InsertAgentGuidance :one
insert into
    agentguidances (id, research_brief_id, guidance_key, guidance_value)
values
    (?, ?, ?, ?)
returning id, research_brief_id, guidance_key, guidance_value
`

type InsertAgentGuidanceParams struct {
	ID              string
	ResearchBriefID string
	GuidanceKey     string
	GuidanceValue   string
}

// InsertAgentGuidance
//
//	insert into
//	    agentguidances (id, research_brief_id, guidance_key, guidance_value)
//	values
//	    (?, ?, ?, ?)
//	returning id, research_brief_id, guidance_key, guidance_value
func (q *Queries) InsertAgentGuidance(ctx context.Context, db DBTX, arg InsertAgentGuidanceParams) (Agentguidance, error) {
	row := db.QueryRowContext(ctx, insertAgentGuidance,
		arg.ID,
		arg.ResearchBriefID,
		arg.GuidanceKey,
		arg.GuidanceValue,
	)
	var i Agentguidance
	err := row.Scan(
		&i.ID,
		&i.ResearchBriefID,
		&i.GuidanceKey,
		&i.GuidanceValue,
	)
	return i, err
}

const queryAgentGuidanceByID = `-- name: QueryAgentGuidanceByID :one
select id, research_brief_id, guidance_key, guidance_value from agentguidances where id=?
`

// QueryAgentGuidanceByID
//
//	select id, research_brief_id, guidance_key, guidance_value from agentguidances where id=?
func (q *Queries) QueryAgentGuidanceByID(ctx context.Context, db DBTX, id string) (Agentguidance, error) {
	row := db.QueryRowContext(ctx, queryAgentGuidanceByID, id)
	var i Agentguidance
	err := row.Scan(
		&i.ID,
		&i.ResearchBriefID,
		&i.GuidanceKey,
		&i.GuidanceValue,
	)
	return i, err
}

const queryAgentGuidances = `-- name: QueryAgentGuidances :many
select id, research_brief_id, guidance_key, guidance_value from agentguidances
`

// QueryAgentGuidances
//
//	select id, research_brief_id, guidance_key, guidance_value from agentguidances
func (q *Queries) QueryAgentGuidances(ctx context.Context, db DBTX) ([]Agentguidance, error) {
	rows, err := db.QueryContext(ctx, queryAgentGuidances)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Agentguidance
	for rows.Next() {
		var i Agentguidance
		if err := rows.Scan(
			&i.ID,
			&i.ResearchBriefID,
			&i.GuidanceKey,
			&i.GuidanceValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryAgentGuidancesByResearchBriefID = `-- name: QueryAgentGuidancesByResearchBriefID :many
select id, research_brief_id, guidance_key, guidance_value from agentguidances where research_brief_id=?
`

// QueryAgentGuidancesByResearchBriefID
//
//	select id, research_brief_id, guidance_key, guidance_value from agentguidances where research_brief_id=?
func (q *Queries) QueryAgentGuidancesByResearchBriefID(ctx context.Context, db DBTX, researchBriefID string) ([]Agentguidance, error) {
	rows, err := db.QueryContext(ctx, queryAgentGuidancesByResearchBriefID, researchBriefID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Agentguidance
	for rows.Next() {
		var i Agentguidance
		if err := rows.Scan(
			&i.ID,
			&i.ResearchBriefID,
			&i.GuidanceKey,
			&i.GuidanceValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryAllAgentGuidances = `-- name: QueryAllAgentGuidances :many
select id, research_brief_id, guidance_key, guidance_value from agentguidances
`

// QueryAllAgentGuidances
//
//	select id, research_brief_id, guidance_key, guidance_value from agentguidances
func (q *Queries) QueryAllAgentGuidances(ctx context.Context, db DBTX) ([]Agentguidance, error) {
	rows, err := db.QueryContext(ctx, queryAllAgentGuidances)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Agentguidance
	for rows.Next() {
		var i Agentguidance
		if err := rows.Scan(
			&i.ID,
			&i.ResearchBriefID,
			&i.GuidanceKey,
			&i.GuidanceValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryPaginatedAgentGuidances = `-- name: QueryPaginatedAgentGuidances :many
select id, research_brief_id, guidance_key, guidance_value from agentguidances 
order by created_at desc 
limit ? offset ?
`

type QueryPaginatedAgentGuidancesParams struct {
	Limit  int64
	Offset int64
}

// QueryPaginatedAgentGuidances
//
//	select id, research_brief_id, guidance_key, guidance_value from agentguidances
//	order by created_at desc
//	limit ? offset ?
func (q *Queries) QueryPaginatedAgentGuidances(ctx context.Context, db DBTX, arg QueryPaginatedAgentGuidancesParams) ([]Agentguidance, error) {
	rows, err := db.QueryContext(ctx, queryPaginatedAgentGuidances, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Agentguidance
	for rows.Next() {
		var i Agentguidance
		if err := rows.Scan(
			&i.ID,
			&i.ResearchBriefID,
			&i.GuidanceKey,
			&i.GuidanceValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgentGuidance = `-- name: UpdateAgentGuidance :one
update agentguidances
    set research_brief_id=?, guidance_key=?, guidance_value=?
where id = ?
returning id, research_brief_id, guidance_key, guidance_value
`

type UpdateAgentGuidanceParams struct {
	ResearchBriefID string
	GuidanceKey     string
	GuidanceValue   string
	ID              string
}

// UpdateAgentGuidance
//
//	update agentguidances
//	    set research_brief_id=?, guidance_key=?, guidance_value=?
//	where id = ?
//	returning id, research_brief_id, guidance_key, guidance_value
func (q *Queries) UpdateAgentGuidance(ctx context.Context, db DBTX, arg UpdateAgentGuidanceParams) (Agentguidance, error) {
	row := db.QueryRowContext(ctx, updateAgentGuidance,
		arg.ResearchBriefID,
		arg.GuidanceKey,
		arg.GuidanceValue,
		arg.ID,
	)
	var i Agentguidance
	err := row.Scan(
		&i.ID,
		&i.ResearchBriefID,
		&i.GuidanceKey,
		&i.GuidanceValue,
	)
	return i, err
}
