// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: reports.sql

package db

import (
	"context"
	"database/sql"
)

const countReports = `-- name: CountReports :one
select count(*) from reports
`

// CountReports
//
//	select count(*) from reports
func (q *Queries) CountReports(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRowContext(ctx, countReports)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteReport = `-- name: DeleteReport :exec
delete from reports where id=?
`

// DeleteReport
//
//	delete from reports where id=?
func (q *Queries) DeleteReport(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, deleteReport, id)
	return err
}

const insertReport = `-- name: InsertReport :one
insert into
    reports (id, created_at, updated_at, compay_candidate_id, company_name, status, progress_percentage, preliminary_research_completed, company_intelligence_completed, competitive_intelligence_completed, market_dynamics_completed, trend_analysis_completed, company_intelligence_data, competitive_intelligence_data, market_dynamics_data, trend_analysis_data, final_report, completed_at)
values
    (?, datetime('now'), datetime('now'), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
returning id, created_at, updated_at, compay_candidate_id, company_name, status, progress_percentage, preliminary_research_completed, company_intelligence_completed, competitive_intelligence_completed, market_dynamics_completed, trend_analysis_completed, company_intelligence_data, competitive_intelligence_data, market_dynamics_data, trend_analysis_data, final_report, completed_at
`

type InsertReportParams struct {
	ID                               string
	CompayCandidateID                string
	CompanyName                      string
	Status                           string
	ProgressPercentage               sql.NullInt64
	PreliminaryResearchCompleted     sql.NullBool
	CompanyIntelligenceCompleted     sql.NullBool
	CompetitiveIntelligenceCompleted sql.NullBool
	MarketDynamicsCompleted          sql.NullBool
	TrendAnalysisCompleted           sql.NullBool
	CompanyIntelligenceData          sql.NullString
	CompetitiveIntelligenceData      sql.NullString
	MarketDynamicsData               sql.NullString
	TrendAnalysisData                sql.NullString
	FinalReport                      sql.NullString
	CompletedAt                      sql.NullTime
}

// InsertReport
//
//	insert into
//	    reports (id, created_at, updated_at, compay_candidate_id, company_name, status, progress_percentage, preliminary_research_completed, company_intelligence_completed, competitive_intelligence_completed, market_dynamics_completed, trend_analysis_completed, company_intelligence_data, competitive_intelligence_data, market_dynamics_data, trend_analysis_data, final_report, completed_at)
//	values
//	    (?, datetime('now'), datetime('now'), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
//	returning id, created_at, updated_at, compay_candidate_id, company_name, status, progress_percentage, preliminary_research_completed, company_intelligence_completed, competitive_intelligence_completed, market_dynamics_completed, trend_analysis_completed, company_intelligence_data, competitive_intelligence_data, market_dynamics_data, trend_analysis_data, final_report, completed_at
func (q *Queries) InsertReport(ctx context.Context, db DBTX, arg InsertReportParams) (Report, error) {
	row := db.QueryRowContext(ctx, insertReport,
		arg.ID,
		arg.CompayCandidateID,
		arg.CompanyName,
		arg.Status,
		arg.ProgressPercentage,
		arg.PreliminaryResearchCompleted,
		arg.CompanyIntelligenceCompleted,
		arg.CompetitiveIntelligenceCompleted,
		arg.MarketDynamicsCompleted,
		arg.TrendAnalysisCompleted,
		arg.CompanyIntelligenceData,
		arg.CompetitiveIntelligenceData,
		arg.MarketDynamicsData,
		arg.TrendAnalysisData,
		arg.FinalReport,
		arg.CompletedAt,
	)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompayCandidateID,
		&i.CompanyName,
		&i.Status,
		&i.ProgressPercentage,
		&i.PreliminaryResearchCompleted,
		&i.CompanyIntelligenceCompleted,
		&i.CompetitiveIntelligenceCompleted,
		&i.MarketDynamicsCompleted,
		&i.TrendAnalysisCompleted,
		&i.CompanyIntelligenceData,
		&i.CompetitiveIntelligenceData,
		&i.MarketDynamicsData,
		&i.TrendAnalysisData,
		&i.FinalReport,
		&i.CompletedAt,
	)
	return i, err
}

const queryAllReports = `-- name: QueryAllReports :many
select id, created_at, updated_at, compay_candidate_id, company_name, status, progress_percentage, preliminary_research_completed, company_intelligence_completed, competitive_intelligence_completed, market_dynamics_completed, trend_analysis_completed, company_intelligence_data, competitive_intelligence_data, market_dynamics_data, trend_analysis_data, final_report, completed_at from reports
`

// QueryAllReports
//
//	select id, created_at, updated_at, compay_candidate_id, company_name, status, progress_percentage, preliminary_research_completed, company_intelligence_completed, competitive_intelligence_completed, market_dynamics_completed, trend_analysis_completed, company_intelligence_data, competitive_intelligence_data, market_dynamics_data, trend_analysis_data, final_report, completed_at from reports
func (q *Queries) QueryAllReports(ctx context.Context, db DBTX) ([]Report, error) {
	rows, err := db.QueryContext(ctx, queryAllReports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompayCandidateID,
			&i.CompanyName,
			&i.Status,
			&i.ProgressPercentage,
			&i.PreliminaryResearchCompleted,
			&i.CompanyIntelligenceCompleted,
			&i.CompetitiveIntelligenceCompleted,
			&i.MarketDynamicsCompleted,
			&i.TrendAnalysisCompleted,
			&i.CompanyIntelligenceData,
			&i.CompetitiveIntelligenceData,
			&i.MarketDynamicsData,
			&i.TrendAnalysisData,
			&i.FinalReport,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryPaginatedReports = `-- name: QueryPaginatedReports :many
select id, created_at, updated_at, compay_candidate_id, company_name, status, progress_percentage, preliminary_research_completed, company_intelligence_completed, competitive_intelligence_completed, market_dynamics_completed, trend_analysis_completed, company_intelligence_data, competitive_intelligence_data, market_dynamics_data, trend_analysis_data, final_report, completed_at from reports 
order by created_at desc 
limit ? offset ?
`

type QueryPaginatedReportsParams struct {
	Limit  int64
	Offset int64
}

// QueryPaginatedReports
//
//	select id, created_at, updated_at, compay_candidate_id, company_name, status, progress_percentage, preliminary_research_completed, company_intelligence_completed, competitive_intelligence_completed, market_dynamics_completed, trend_analysis_completed, company_intelligence_data, competitive_intelligence_data, market_dynamics_data, trend_analysis_data, final_report, completed_at from reports
//	order by created_at desc
//	limit ? offset ?
func (q *Queries) QueryPaginatedReports(ctx context.Context, db DBTX, arg QueryPaginatedReportsParams) ([]Report, error) {
	rows, err := db.QueryContext(ctx, queryPaginatedReports, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompayCandidateID,
			&i.CompanyName,
			&i.Status,
			&i.ProgressPercentage,
			&i.PreliminaryResearchCompleted,
			&i.CompanyIntelligenceCompleted,
			&i.CompetitiveIntelligenceCompleted,
			&i.MarketDynamicsCompleted,
			&i.TrendAnalysisCompleted,
			&i.CompanyIntelligenceData,
			&i.CompetitiveIntelligenceData,
			&i.MarketDynamicsData,
			&i.TrendAnalysisData,
			&i.FinalReport,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryReportByID = `-- name: QueryReportByID :one
select id, created_at, updated_at, compay_candidate_id, company_name, status, progress_percentage, preliminary_research_completed, company_intelligence_completed, competitive_intelligence_completed, market_dynamics_completed, trend_analysis_completed, company_intelligence_data, competitive_intelligence_data, market_dynamics_data, trend_analysis_data, final_report, completed_at from reports where id=?
`

// QueryReportByID
//
//	select id, created_at, updated_at, compay_candidate_id, company_name, status, progress_percentage, preliminary_research_completed, company_intelligence_completed, competitive_intelligence_completed, market_dynamics_completed, trend_analysis_completed, company_intelligence_data, competitive_intelligence_data, market_dynamics_data, trend_analysis_data, final_report, completed_at from reports where id=?
func (q *Queries) QueryReportByID(ctx context.Context, db DBTX, id string) (Report, error) {
	row := db.QueryRowContext(ctx, queryReportByID, id)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompayCandidateID,
		&i.CompanyName,
		&i.Status,
		&i.ProgressPercentage,
		&i.PreliminaryResearchCompleted,
		&i.CompanyIntelligenceCompleted,
		&i.CompetitiveIntelligenceCompleted,
		&i.MarketDynamicsCompleted,
		&i.TrendAnalysisCompleted,
		&i.CompanyIntelligenceData,
		&i.CompetitiveIntelligenceData,
		&i.MarketDynamicsData,
		&i.TrendAnalysisData,
		&i.FinalReport,
		&i.CompletedAt,
	)
	return i, err
}

const queryReports = `-- name: QueryReports :many
select id, created_at, updated_at, compay_candidate_id, company_name, status, progress_percentage, preliminary_research_completed, company_intelligence_completed, competitive_intelligence_completed, market_dynamics_completed, trend_analysis_completed, company_intelligence_data, competitive_intelligence_data, market_dynamics_data, trend_analysis_data, final_report, completed_at from reports
`

// QueryReports
//
//	select id, created_at, updated_at, compay_candidate_id, company_name, status, progress_percentage, preliminary_research_completed, company_intelligence_completed, competitive_intelligence_completed, market_dynamics_completed, trend_analysis_completed, company_intelligence_data, competitive_intelligence_data, market_dynamics_data, trend_analysis_data, final_report, completed_at from reports
func (q *Queries) QueryReports(ctx context.Context, db DBTX) ([]Report, error) {
	rows, err := db.QueryContext(ctx, queryReports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompayCandidateID,
			&i.CompanyName,
			&i.Status,
			&i.ProgressPercentage,
			&i.PreliminaryResearchCompleted,
			&i.CompanyIntelligenceCompleted,
			&i.CompetitiveIntelligenceCompleted,
			&i.MarketDynamicsCompleted,
			&i.TrendAnalysisCompleted,
			&i.CompanyIntelligenceData,
			&i.CompetitiveIntelligenceData,
			&i.MarketDynamicsData,
			&i.TrendAnalysisData,
			&i.FinalReport,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompanyIntelligence = `-- name: UpdateCompanyIntelligence :exec
UPDATE reports
SET company_intelligence_data = ?,
    company_intelligence_completed = ?,
    updated_at = datetime('now')
WHERE id = ?
`

type UpdateCompanyIntelligenceParams struct {
	CompanyIntelligenceData      sql.NullString
	CompanyIntelligenceCompleted sql.NullBool
	ID                           string
}

// UpdateCompanyIntelligence
//
//	UPDATE reports
//	SET company_intelligence_data = ?,
//	    company_intelligence_completed = ?,
//	    updated_at = datetime('now')
//	WHERE id = ?
func (q *Queries) UpdateCompanyIntelligence(ctx context.Context, db DBTX, arg UpdateCompanyIntelligenceParams) error {
	_, err := db.ExecContext(ctx, updateCompanyIntelligence, arg.CompanyIntelligenceData, arg.CompanyIntelligenceCompleted, arg.ID)
	return err
}

const updateCompetitiveIntelligence = `-- name: UpdateCompetitiveIntelligence :exec
UPDATE reports
SET competitive_intelligence_data = ?,
    competitive_intelligence_completed = ?,
    updated_at = datetime('now')
WHERE id = ?
`

type UpdateCompetitiveIntelligenceParams struct {
	CompetitiveIntelligenceData      sql.NullString
	CompetitiveIntelligenceCompleted sql.NullBool
	ID                               string
}

// UpdateCompetitiveIntelligence
//
//	UPDATE reports
//	SET competitive_intelligence_data = ?,
//	    competitive_intelligence_completed = ?,
//	    updated_at = datetime('now')
//	WHERE id = ?
func (q *Queries) UpdateCompetitiveIntelligence(ctx context.Context, db DBTX, arg UpdateCompetitiveIntelligenceParams) error {
	_, err := db.ExecContext(ctx, updateCompetitiveIntelligence, arg.CompetitiveIntelligenceData, arg.CompetitiveIntelligenceCompleted, arg.ID)
	return err
}

const updateFinalReport = `-- name: UpdateFinalReport :exec
UPDATE reports
SET final_report = ?,
    status = 'completed',
    completed_at = datetime('now'),
    updated_at = datetime('now')
WHERE id = ?
`

type UpdateFinalReportParams struct {
	FinalReport sql.NullString
	ID          string
}

// UpdateFinalReport
//
//	UPDATE reports
//	SET final_report = ?,
//	    status = 'completed',
//	    completed_at = datetime('now'),
//	    updated_at = datetime('now')
//	WHERE id = ?
func (q *Queries) UpdateFinalReport(ctx context.Context, db DBTX, arg UpdateFinalReportParams) error {
	_, err := db.ExecContext(ctx, updateFinalReport, arg.FinalReport, arg.ID)
	return err
}

const updateMarketDynamics = `-- name: UpdateMarketDynamics :exec
UPDATE reports
SET market_dynamics_data = ?,
    market_dynamics_completed = ?,
    updated_at = datetime('now')
WHERE id = ?
`

type UpdateMarketDynamicsParams struct {
	MarketDynamicsData      sql.NullString
	MarketDynamicsCompleted sql.NullBool
	ID                      string
}

// UpdateMarketDynamics
//
//	UPDATE reports
//	SET market_dynamics_data = ?,
//	    market_dynamics_completed = ?,
//	    updated_at = datetime('now')
//	WHERE id = ?
func (q *Queries) UpdateMarketDynamics(ctx context.Context, db DBTX, arg UpdateMarketDynamicsParams) error {
	_, err := db.ExecContext(ctx, updateMarketDynamics, arg.MarketDynamicsData, arg.MarketDynamicsCompleted, arg.ID)
	return err
}

const updateReport = `-- name: UpdateReport :one
update reports
    set updated_at=datetime('now'), compay_candidate_id=?, company_name=?, status=?, progress_percentage=?, preliminary_research_completed=?, company_intelligence_completed=?, competitive_intelligence_completed=?, market_dynamics_completed=?, trend_analysis_completed=?, company_intelligence_data=?, competitive_intelligence_data=?, market_dynamics_data=?, trend_analysis_data=?, final_report=?, completed_at=?
where id = ?
returning id, created_at, updated_at, compay_candidate_id, company_name, status, progress_percentage, preliminary_research_completed, company_intelligence_completed, competitive_intelligence_completed, market_dynamics_completed, trend_analysis_completed, company_intelligence_data, competitive_intelligence_data, market_dynamics_data, trend_analysis_data, final_report, completed_at
`

type UpdateReportParams struct {
	CompayCandidateID                string
	CompanyName                      string
	Status                           string
	ProgressPercentage               sql.NullInt64
	PreliminaryResearchCompleted     sql.NullBool
	CompanyIntelligenceCompleted     sql.NullBool
	CompetitiveIntelligenceCompleted sql.NullBool
	MarketDynamicsCompleted          sql.NullBool
	TrendAnalysisCompleted           sql.NullBool
	CompanyIntelligenceData          sql.NullString
	CompetitiveIntelligenceData      sql.NullString
	MarketDynamicsData               sql.NullString
	TrendAnalysisData                sql.NullString
	FinalReport                      sql.NullString
	CompletedAt                      sql.NullTime
	ID                               string
}

// UpdateReport
//
//	update reports
//	    set updated_at=datetime('now'), compay_candidate_id=?, company_name=?, status=?, progress_percentage=?, preliminary_research_completed=?, company_intelligence_completed=?, competitive_intelligence_completed=?, market_dynamics_completed=?, trend_analysis_completed=?, company_intelligence_data=?, competitive_intelligence_data=?, market_dynamics_data=?, trend_analysis_data=?, final_report=?, completed_at=?
//	where id = ?
//	returning id, created_at, updated_at, compay_candidate_id, company_name, status, progress_percentage, preliminary_research_completed, company_intelligence_completed, competitive_intelligence_completed, market_dynamics_completed, trend_analysis_completed, company_intelligence_data, competitive_intelligence_data, market_dynamics_data, trend_analysis_data, final_report, completed_at
func (q *Queries) UpdateReport(ctx context.Context, db DBTX, arg UpdateReportParams) (Report, error) {
	row := db.QueryRowContext(ctx, updateReport,
		arg.CompayCandidateID,
		arg.CompanyName,
		arg.Status,
		arg.ProgressPercentage,
		arg.PreliminaryResearchCompleted,
		arg.CompanyIntelligenceCompleted,
		arg.CompetitiveIntelligenceCompleted,
		arg.MarketDynamicsCompleted,
		arg.TrendAnalysisCompleted,
		arg.CompanyIntelligenceData,
		arg.CompetitiveIntelligenceData,
		arg.MarketDynamicsData,
		arg.TrendAnalysisData,
		arg.FinalReport,
		arg.CompletedAt,
		arg.ID,
	)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompayCandidateID,
		&i.CompanyName,
		&i.Status,
		&i.ProgressPercentage,
		&i.PreliminaryResearchCompleted,
		&i.CompanyIntelligenceCompleted,
		&i.CompetitiveIntelligenceCompleted,
		&i.MarketDynamicsCompleted,
		&i.TrendAnalysisCompleted,
		&i.CompanyIntelligenceData,
		&i.CompetitiveIntelligenceData,
		&i.MarketDynamicsData,
		&i.TrendAnalysisData,
		&i.FinalReport,
		&i.CompletedAt,
	)
	return i, err
}

const updateReportProgress = `-- name: UpdateReportProgress :exec
UPDATE reports
SET progress_percentage = ?,
    status = ?,
    updated_at = datetime('now')
WHERE id = ?
`

type UpdateReportProgressParams struct {
	ProgressPercentage sql.NullInt64
	Status             string
	ID                 string
}

// UpdateReportProgress
//
//	UPDATE reports
//	SET progress_percentage = ?,
//	    status = ?,
//	    updated_at = datetime('now')
//	WHERE id = ?
func (q *Queries) UpdateReportProgress(ctx context.Context, db DBTX, arg UpdateReportProgressParams) error {
	_, err := db.ExecContext(ctx, updateReportProgress, arg.ProgressPercentage, arg.Status, arg.ID)
	return err
}

const updateTrendAnalysis = `-- name: UpdateTrendAnalysis :exec
UPDATE reports
SET trend_analysis_data = ?,
    trend_analysis_completed = ?,
    updated_at = datetime('now')
WHERE id = ?
`

type UpdateTrendAnalysisParams struct {
	TrendAnalysisData      sql.NullString
	TrendAnalysisCompleted sql.NullBool
	ID                     string
}

// UpdateTrendAnalysis
//
//	UPDATE reports
//	SET trend_analysis_data = ?,
//	    trend_analysis_completed = ?,
//	    updated_at = datetime('now')
//	WHERE id = ?
func (q *Queries) UpdateTrendAnalysis(ctx context.Context, db DBTX, arg UpdateTrendAnalysisParams) error {
	_, err := db.ExecContext(ctx, updateTrendAnalysis, arg.TrendAnalysisData, arg.TrendAnalysisCompleted, arg.ID)
	return err
}
