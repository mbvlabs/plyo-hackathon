// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: companycandidates.sql

package db

import (
	"context"
)

const countCompanyCandidatess = `-- name: CountCompanyCandidatess :one
select count(*) from companycandidates
`

// CountCompanyCandidatess
//
//	select count(*) from companycandidates
func (q *Queries) CountCompanyCandidatess(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRowContext(ctx, countCompanyCandidatess)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteCompanyCandidates = `-- name: DeleteCompanyCandidates :exec
delete from companycandidates where id=?
`

// DeleteCompanyCandidates
//
//	delete from companycandidates where id=?
func (q *Queries) DeleteCompanyCandidates(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, deleteCompanyCandidates, id)
	return err
}

const insertCompanyCandidates = `-- name: InsertCompanyCandidates :one
insert into
    companycandidates (id, research_brief_id, name, domain, description, industry, location)
values
    (?, ?, ?, ?, ?, ?, ?)
returning id, research_brief_id, name, domain, description, industry, location
`

type InsertCompanyCandidatesParams struct {
	ID              string
	ResearchBriefID string
	Name            string
	Domain          string
	Description     string
	Industry        string
	Location        string
}

// InsertCompanyCandidates
//
//	insert into
//	    companycandidates (id, research_brief_id, name, domain, description, industry, location)
//	values
//	    (?, ?, ?, ?, ?, ?, ?)
//	returning id, research_brief_id, name, domain, description, industry, location
func (q *Queries) InsertCompanyCandidates(ctx context.Context, db DBTX, arg InsertCompanyCandidatesParams) (Companycandidate, error) {
	row := db.QueryRowContext(ctx, insertCompanyCandidates,
		arg.ID,
		arg.ResearchBriefID,
		arg.Name,
		arg.Domain,
		arg.Description,
		arg.Industry,
		arg.Location,
	)
	var i Companycandidate
	err := row.Scan(
		&i.ID,
		&i.ResearchBriefID,
		&i.Name,
		&i.Domain,
		&i.Description,
		&i.Industry,
		&i.Location,
	)
	return i, err
}

const queryAllCompanyCandidatess = `-- name: QueryAllCompanyCandidatess :many
select id, research_brief_id, name, domain, description, industry, location from companycandidates
`

// QueryAllCompanyCandidatess
//
//	select id, research_brief_id, name, domain, description, industry, location from companycandidates
func (q *Queries) QueryAllCompanyCandidatess(ctx context.Context, db DBTX) ([]Companycandidate, error) {
	rows, err := db.QueryContext(ctx, queryAllCompanyCandidatess)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Companycandidate
	for rows.Next() {
		var i Companycandidate
		if err := rows.Scan(
			&i.ID,
			&i.ResearchBriefID,
			&i.Name,
			&i.Domain,
			&i.Description,
			&i.Industry,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryCompanyCandidatesByID = `-- name: QueryCompanyCandidatesByID :one
select id, research_brief_id, name, domain, description, industry, location from companycandidates where id=?
`

// QueryCompanyCandidatesByID
//
//	select id, research_brief_id, name, domain, description, industry, location from companycandidates where id=?
func (q *Queries) QueryCompanyCandidatesByID(ctx context.Context, db DBTX, id string) (Companycandidate, error) {
	row := db.QueryRowContext(ctx, queryCompanyCandidatesByID, id)
	var i Companycandidate
	err := row.Scan(
		&i.ID,
		&i.ResearchBriefID,
		&i.Name,
		&i.Domain,
		&i.Description,
		&i.Industry,
		&i.Location,
	)
	return i, err
}

const queryCompanyCandidatesByResearchBriefID = `-- name: QueryCompanyCandidatesByResearchBriefID :many
select id, research_brief_id, name, domain, description, industry, location from companycandidates where research_brief_id=?
`

// QueryCompanyCandidatesByResearchBriefID
//
//	select id, research_brief_id, name, domain, description, industry, location from companycandidates where research_brief_id=?
func (q *Queries) QueryCompanyCandidatesByResearchBriefID(ctx context.Context, db DBTX, researchBriefID string) ([]Companycandidate, error) {
	rows, err := db.QueryContext(ctx, queryCompanyCandidatesByResearchBriefID, researchBriefID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Companycandidate
	for rows.Next() {
		var i Companycandidate
		if err := rows.Scan(
			&i.ID,
			&i.ResearchBriefID,
			&i.Name,
			&i.Domain,
			&i.Description,
			&i.Industry,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryCompanyCandidatess = `-- name: QueryCompanyCandidatess :many
select id, research_brief_id, name, domain, description, industry, location from companycandidates
`

// QueryCompanyCandidatess
//
//	select id, research_brief_id, name, domain, description, industry, location from companycandidates
func (q *Queries) QueryCompanyCandidatess(ctx context.Context, db DBTX) ([]Companycandidate, error) {
	rows, err := db.QueryContext(ctx, queryCompanyCandidatess)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Companycandidate
	for rows.Next() {
		var i Companycandidate
		if err := rows.Scan(
			&i.ID,
			&i.ResearchBriefID,
			&i.Name,
			&i.Domain,
			&i.Description,
			&i.Industry,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryPaginatedCompanyCandidatess = `-- name: QueryPaginatedCompanyCandidatess :many
select id, research_brief_id, name, domain, description, industry, location from companycandidates 
order by created_at desc 
limit ? offset ?
`

type QueryPaginatedCompanyCandidatessParams struct {
	Limit  int64
	Offset int64
}

// QueryPaginatedCompanyCandidatess
//
//	select id, research_brief_id, name, domain, description, industry, location from companycandidates
//	order by created_at desc
//	limit ? offset ?
func (q *Queries) QueryPaginatedCompanyCandidatess(ctx context.Context, db DBTX, arg QueryPaginatedCompanyCandidatessParams) ([]Companycandidate, error) {
	rows, err := db.QueryContext(ctx, queryPaginatedCompanyCandidatess, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Companycandidate
	for rows.Next() {
		var i Companycandidate
		if err := rows.Scan(
			&i.ID,
			&i.ResearchBriefID,
			&i.Name,
			&i.Domain,
			&i.Description,
			&i.Industry,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompanyCandidates = `-- name: UpdateCompanyCandidates :one
update companycandidates
    set research_brief_id=?, name=?, domain=?, description=?, industry=?, location=?
where id = ?
returning id, research_brief_id, name, domain, description, industry, location
`

type UpdateCompanyCandidatesParams struct {
	ResearchBriefID string
	Name            string
	Domain          string
	Description     string
	Industry        string
	Location        string
	ID              string
}

// UpdateCompanyCandidates
//
//	update companycandidates
//	    set research_brief_id=?, name=?, domain=?, description=?, industry=?, location=?
//	where id = ?
//	returning id, research_brief_id, name, domain, description, industry, location
func (q *Queries) UpdateCompanyCandidates(ctx context.Context, db DBTX, arg UpdateCompanyCandidatesParams) (Companycandidate, error) {
	row := db.QueryRowContext(ctx, updateCompanyCandidates,
		arg.ResearchBriefID,
		arg.Name,
		arg.Domain,
		arg.Description,
		arg.Industry,
		arg.Location,
		arg.ID,
	)
	var i Companycandidate
	err := row.Scan(
		&i.ID,
		&i.ResearchBriefID,
		&i.Name,
		&i.Domain,
		&i.Description,
		&i.Industry,
		&i.Location,
	)
	return i, err
}
