// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: sources.sql

package db

import (
	"context"
)

const countSourcess = `-- name: CountSourcess :one
select count(*) from sources
`

// CountSourcess
//
//	select count(*) from sources
func (q *Queries) CountSourcess(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRowContext(ctx, countSourcess)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteSources = `-- name: DeleteSources :exec
delete from sources where id=?
`

// DeleteSources
//
//	delete from sources where id=?
func (q *Queries) DeleteSources(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, deleteSources, id)
	return err
}

const insertSources = `-- name: InsertSources :one
insert into
    sources (id, research_brief_id, source_url)
values
    (?, ?, ?)
returning id, research_brief_id, source_url
`

type InsertSourcesParams struct {
	ID              string
	ResearchBriefID string
	SourceUrl       string
}

// InsertSources
//
//	insert into
//	    sources (id, research_brief_id, source_url)
//	values
//	    (?, ?, ?)
//	returning id, research_brief_id, source_url
func (q *Queries) InsertSources(ctx context.Context, db DBTX, arg InsertSourcesParams) (Source, error) {
	row := db.QueryRowContext(ctx, insertSources, arg.ID, arg.ResearchBriefID, arg.SourceUrl)
	var i Source
	err := row.Scan(&i.ID, &i.ResearchBriefID, &i.SourceUrl)
	return i, err
}

const queryAllSourcess = `-- name: QueryAllSourcess :many
select id, research_brief_id, source_url from sources
`

// QueryAllSourcess
//
//	select id, research_brief_id, source_url from sources
func (q *Queries) QueryAllSourcess(ctx context.Context, db DBTX) ([]Source, error) {
	rows, err := db.QueryContext(ctx, queryAllSourcess)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Source
	for rows.Next() {
		var i Source
		if err := rows.Scan(&i.ID, &i.ResearchBriefID, &i.SourceUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryPaginatedSourcess = `-- name: QueryPaginatedSourcess :many
select id, research_brief_id, source_url from sources 
order by created_at desc 
limit ? offset ?
`

type QueryPaginatedSourcessParams struct {
	Limit  int64
	Offset int64
}

// QueryPaginatedSourcess
//
//	select id, research_brief_id, source_url from sources
//	order by created_at desc
//	limit ? offset ?
func (q *Queries) QueryPaginatedSourcess(ctx context.Context, db DBTX, arg QueryPaginatedSourcessParams) ([]Source, error) {
	rows, err := db.QueryContext(ctx, queryPaginatedSourcess, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Source
	for rows.Next() {
		var i Source
		if err := rows.Scan(&i.ID, &i.ResearchBriefID, &i.SourceUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const querySourcesByID = `-- name: QuerySourcesByID :one
select id, research_brief_id, source_url from sources where id=?
`

// QuerySourcesByID
//
//	select id, research_brief_id, source_url from sources where id=?
func (q *Queries) QuerySourcesByID(ctx context.Context, db DBTX, id string) (Source, error) {
	row := db.QueryRowContext(ctx, querySourcesByID, id)
	var i Source
	err := row.Scan(&i.ID, &i.ResearchBriefID, &i.SourceUrl)
	return i, err
}

const querySourcesByResearchBriefID = `-- name: QuerySourcesByResearchBriefID :many
select id, research_brief_id, source_url from sources where research_brief_id=?
`

// QuerySourcesByResearchBriefID
//
//	select id, research_brief_id, source_url from sources where research_brief_id=?
func (q *Queries) QuerySourcesByResearchBriefID(ctx context.Context, db DBTX, researchBriefID string) ([]Source, error) {
	rows, err := db.QueryContext(ctx, querySourcesByResearchBriefID, researchBriefID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Source
	for rows.Next() {
		var i Source
		if err := rows.Scan(&i.ID, &i.ResearchBriefID, &i.SourceUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const querySourcess = `-- name: QuerySourcess :many
select id, research_brief_id, source_url from sources
`

// QuerySourcess
//
//	select id, research_brief_id, source_url from sources
func (q *Queries) QuerySourcess(ctx context.Context, db DBTX) ([]Source, error) {
	rows, err := db.QueryContext(ctx, querySourcess)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Source
	for rows.Next() {
		var i Source
		if err := rows.Scan(&i.ID, &i.ResearchBriefID, &i.SourceUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSources = `-- name: UpdateSources :one
update sources
    set research_brief_id=?, source_url=?
where id = ?
returning id, research_brief_id, source_url
`

type UpdateSourcesParams struct {
	ResearchBriefID string
	SourceUrl       string
	ID              string
}

// UpdateSources
//
//	update sources
//	    set research_brief_id=?, source_url=?
//	where id = ?
//	returning id, research_brief_id, source_url
func (q *Queries) UpdateSources(ctx context.Context, db DBTX, arg UpdateSourcesParams) (Source, error) {
	row := db.QueryRowContext(ctx, updateSources, arg.ResearchBriefID, arg.SourceUrl, arg.ID)
	var i Source
	err := row.Scan(&i.ID, &i.ResearchBriefID, &i.SourceUrl)
	return i, err
}
