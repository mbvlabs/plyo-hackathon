// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: researchbriefs.sql

package db

import (
	"context"
	"time"
)

const countResearchBriefs = `-- name: CountResearchBriefs :one
select count(*) from researchbriefs
`

// CountResearchBriefs
//
//	select count(*) from researchbriefs
func (q *Queries) CountResearchBriefs(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRowContext(ctx, countResearchBriefs)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteResearchBrief = `-- name: DeleteResearchBrief :exec
delete from researchbriefs where id=?
`

// DeleteResearchBrief
//
//	delete from researchbriefs where id=?
func (q *Queries) DeleteResearchBrief(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, deleteResearchBrief, id)
	return err
}

const insertResearchBrief = `-- name: InsertResearchBrief :one
insert into
    researchbriefs (id, identification_status, company_name, official_domain, headquarters, industry, company_type, status, geographic_scope, research_depth, confidence_score, last_updated)
values
    (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
returning id, identification_status, company_name, official_domain, headquarters, industry, company_type, status, geographic_scope, research_depth, confidence_score, last_updated
`

type InsertResearchBriefParams struct {
	ID                   string
	IdentificationStatus string
	CompanyName          string
	OfficialDomain       string
	Headquarters         string
	Industry             string
	CompanyType          string
	Status               string
	GeographicScope      string
	ResearchDepth        string
	ConfidenceScore      float64
	LastUpdated          time.Time
}

// InsertResearchBrief
//
//	insert into
//	    researchbriefs (id, identification_status, company_name, official_domain, headquarters, industry, company_type, status, geographic_scope, research_depth, confidence_score, last_updated)
//	values
//	    (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
//	returning id, identification_status, company_name, official_domain, headquarters, industry, company_type, status, geographic_scope, research_depth, confidence_score, last_updated
func (q *Queries) InsertResearchBrief(ctx context.Context, db DBTX, arg InsertResearchBriefParams) (Researchbrief, error) {
	row := db.QueryRowContext(ctx, insertResearchBrief,
		arg.ID,
		arg.IdentificationStatus,
		arg.CompanyName,
		arg.OfficialDomain,
		arg.Headquarters,
		arg.Industry,
		arg.CompanyType,
		arg.Status,
		arg.GeographicScope,
		arg.ResearchDepth,
		arg.ConfidenceScore,
		arg.LastUpdated,
	)
	var i Researchbrief
	err := row.Scan(
		&i.ID,
		&i.IdentificationStatus,
		&i.CompanyName,
		&i.OfficialDomain,
		&i.Headquarters,
		&i.Industry,
		&i.CompanyType,
		&i.Status,
		&i.GeographicScope,
		&i.ResearchDepth,
		&i.ConfidenceScore,
		&i.LastUpdated,
	)
	return i, err
}

const queryAllResearchBriefs = `-- name: QueryAllResearchBriefs :many
select id, identification_status, company_name, official_domain, headquarters, industry, company_type, status, geographic_scope, research_depth, confidence_score, last_updated from researchbriefs
`

// QueryAllResearchBriefs
//
//	select id, identification_status, company_name, official_domain, headquarters, industry, company_type, status, geographic_scope, research_depth, confidence_score, last_updated from researchbriefs
func (q *Queries) QueryAllResearchBriefs(ctx context.Context, db DBTX) ([]Researchbrief, error) {
	rows, err := db.QueryContext(ctx, queryAllResearchBriefs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Researchbrief
	for rows.Next() {
		var i Researchbrief
		if err := rows.Scan(
			&i.ID,
			&i.IdentificationStatus,
			&i.CompanyName,
			&i.OfficialDomain,
			&i.Headquarters,
			&i.Industry,
			&i.CompanyType,
			&i.Status,
			&i.GeographicScope,
			&i.ResearchDepth,
			&i.ConfidenceScore,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryPaginatedResearchBriefs = `-- name: QueryPaginatedResearchBriefs :many
select id, identification_status, company_name, official_domain, headquarters, industry, company_type, status, geographic_scope, research_depth, confidence_score, last_updated from researchbriefs 
order by created_at desc 
limit ? offset ?
`

type QueryPaginatedResearchBriefsParams struct {
	Limit  int64
	Offset int64
}

// QueryPaginatedResearchBriefs
//
//	select id, identification_status, company_name, official_domain, headquarters, industry, company_type, status, geographic_scope, research_depth, confidence_score, last_updated from researchbriefs
//	order by created_at desc
//	limit ? offset ?
func (q *Queries) QueryPaginatedResearchBriefs(ctx context.Context, db DBTX, arg QueryPaginatedResearchBriefsParams) ([]Researchbrief, error) {
	rows, err := db.QueryContext(ctx, queryPaginatedResearchBriefs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Researchbrief
	for rows.Next() {
		var i Researchbrief
		if err := rows.Scan(
			&i.ID,
			&i.IdentificationStatus,
			&i.CompanyName,
			&i.OfficialDomain,
			&i.Headquarters,
			&i.Industry,
			&i.CompanyType,
			&i.Status,
			&i.GeographicScope,
			&i.ResearchDepth,
			&i.ConfidenceScore,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryResearchBriefByID = `-- name: QueryResearchBriefByID :one
select id, identification_status, company_name, official_domain, headquarters, industry, company_type, status, geographic_scope, research_depth, confidence_score, last_updated from researchbriefs where id=?
`

// QueryResearchBriefByID
//
//	select id, identification_status, company_name, official_domain, headquarters, industry, company_type, status, geographic_scope, research_depth, confidence_score, last_updated from researchbriefs where id=?
func (q *Queries) QueryResearchBriefByID(ctx context.Context, db DBTX, id string) (Researchbrief, error) {
	row := db.QueryRowContext(ctx, queryResearchBriefByID, id)
	var i Researchbrief
	err := row.Scan(
		&i.ID,
		&i.IdentificationStatus,
		&i.CompanyName,
		&i.OfficialDomain,
		&i.Headquarters,
		&i.Industry,
		&i.CompanyType,
		&i.Status,
		&i.GeographicScope,
		&i.ResearchDepth,
		&i.ConfidenceScore,
		&i.LastUpdated,
	)
	return i, err
}

const queryResearchBriefs = `-- name: QueryResearchBriefs :many
select id, identification_status, company_name, official_domain, headquarters, industry, company_type, status, geographic_scope, research_depth, confidence_score, last_updated from researchbriefs
`

// QueryResearchBriefs
//
//	select id, identification_status, company_name, official_domain, headquarters, industry, company_type, status, geographic_scope, research_depth, confidence_score, last_updated from researchbriefs
func (q *Queries) QueryResearchBriefs(ctx context.Context, db DBTX) ([]Researchbrief, error) {
	rows, err := db.QueryContext(ctx, queryResearchBriefs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Researchbrief
	for rows.Next() {
		var i Researchbrief
		if err := rows.Scan(
			&i.ID,
			&i.IdentificationStatus,
			&i.CompanyName,
			&i.OfficialDomain,
			&i.Headquarters,
			&i.Industry,
			&i.CompanyType,
			&i.Status,
			&i.GeographicScope,
			&i.ResearchDepth,
			&i.ConfidenceScore,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateResearchBrief = `-- name: UpdateResearchBrief :one
update researchbriefs
    set identification_status=?, company_name=?, official_domain=?, headquarters=?, industry=?, company_type=?, status=?, geographic_scope=?, research_depth=?, confidence_score=?, last_updated=?
where id = ?
returning id, identification_status, company_name, official_domain, headquarters, industry, company_type, status, geographic_scope, research_depth, confidence_score, last_updated
`

type UpdateResearchBriefParams struct {
	IdentificationStatus string
	CompanyName          string
	OfficialDomain       string
	Headquarters         string
	Industry             string
	CompanyType          string
	Status               string
	GeographicScope      string
	ResearchDepth        string
	ConfidenceScore      float64
	LastUpdated          time.Time
	ID                   string
}

// UpdateResearchBrief
//
//	update researchbriefs
//	    set identification_status=?, company_name=?, official_domain=?, headquarters=?, industry=?, company_type=?, status=?, geographic_scope=?, research_depth=?, confidence_score=?, last_updated=?
//	where id = ?
//	returning id, identification_status, company_name, official_domain, headquarters, industry, company_type, status, geographic_scope, research_depth, confidence_score, last_updated
func (q *Queries) UpdateResearchBrief(ctx context.Context, db DBTX, arg UpdateResearchBriefParams) (Researchbrief, error) {
	row := db.QueryRowContext(ctx, updateResearchBrief,
		arg.IdentificationStatus,
		arg.CompanyName,
		arg.OfficialDomain,
		arg.Headquarters,
		arg.Industry,
		arg.CompanyType,
		arg.Status,
		arg.GeographicScope,
		arg.ResearchDepth,
		arg.ConfidenceScore,
		arg.LastUpdated,
		arg.ID,
	)
	var i Researchbrief
	err := row.Scan(
		&i.ID,
		&i.IdentificationStatus,
		&i.CompanyName,
		&i.OfficialDomain,
		&i.Headquarters,
		&i.Industry,
		&i.CompanyType,
		&i.Status,
		&i.GeographicScope,
		&i.ResearchDepth,
		&i.ConfidenceScore,
		&i.LastUpdated,
	)
	return i, err
}
